# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "develop", "main" ]
  pull_request:
    branches: [ "main" ]


jobs:
  build:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
    - uses: actions/checkout@v4
    
    ## jdk setting
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    ## application.yml 파일 생성
    - name: make application.yml
      run: |
        mkdir -p ./src/main/resources
        touch ./src/main/resources/application.yml
        echo "${{ secrets.APPLICATION }}" >> ./src/main/resources/application.yml
      shell: bash

    ## gralew 실행 권한 부여  
    - name: Grant execute permission for gradlew
      run: |
        cd tweione
        chmod +x ./tweione/gradlew
      
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
    
    ## 빌드 
    - name: Build with Gradle
      run: ./tweione/gradlew build
      
    ## Docker hub login & build & push
    - name: Docker hub login
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_ID }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Docker image build
      run: |
        docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }} .
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}

    ################## CD ##################

    ## AWS EC2 접속
    - name: Deploy to Dev
      uses: appleboy/ssh-action@master
      with:
        host: "${{ secrets.GDP_HOST }}"
        username: "${{ secrets.GDP_USERNAME }}"
        key: "${{ secrets.GDP_KEY }}"
        script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
            sudo docker-compose -f "docker-compose.yml" up -d --build
            sudo docker image prune -f
